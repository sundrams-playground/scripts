From 6503d46a1b33239cdb76f5e4d2d2c106d83f9b1c Mon Sep 17 00:00:00 2001
From: xyz-sundram <sundrraam@gmail.com>
Date: Tue, 18 Jul 2023 12:26:09 -0300
Subject: [PATCH] drivers: add KernelSU

---
 .gitmodules              |  3 +++
 KernelSU                 |  1 +
 drivers/Kconfig          |  2 ++
 drivers/Makefile         |  3 +++
 drivers/input/input.c    |  3 +++
 drivers/kernelsu         |  1 +
 fs/exec.c                |  4 ++++
 fs/open.c                |  4 ++++
 fs/read_write.c          |  4 ++++
 fs/stat.c                |  4 ++++
 security/selinux/hooks.c | 17 ++++++++++++++++-
 11 files changed, 45 insertions(+), 1 deletion(-)
 create mode 100644 .gitmodules
 create mode 160000 KernelSU
 create mode 120000 drivers/kernelsu

diff --git a/.gitmodules b/.gitmodules
new file mode 100644
index 000000000000..5526cf890b41
--- /dev/null
+++ b/.gitmodules
@@ -0,0 +1,3 @@
+[submodule "KernelSU"]
+	path = KernelSU
+	url = https://github.com/tiann/KernelSU
diff --git a/KernelSU b/KernelSU
new file mode 160000
index 000000000000..6bf9e0478e22
--- /dev/null
+++ b/KernelSU
@@ -0,0 +1 @@
+Subproject commit 6bf9e0478e2270b485b947822d5041528924401a
diff --git a/drivers/Kconfig b/drivers/Kconfig
index 9bed54eefd45..46dd78740aae 100644
--- a/drivers/Kconfig
+++ b/drivers/Kconfig
@@ -227,4 +227,6 @@ source "drivers/sensors/Kconfig"
 
 source "drivers/esoc/Kconfig"
 
+source "drivers/kernelsu/Kconfig"
+
 endmenu
diff --git a/drivers/Makefile b/drivers/Makefile
index ec04b87beb83..4779d0e3e0c6 100644
--- a/drivers/Makefile
+++ b/drivers/Makefile
@@ -192,3 +192,6 @@ obj-$(CONFIG_ESOC)              += esoc/
 # GNSS driver
 obj-$(CONFIG_GNSS_SIRF)		+= gnsssirf/
 obj-$(CONFIG_GNSS)		+= gnss/
+
+#KSU
+obj-$(CONFIG_KSU) += kernelsu/
\ No newline at end of file
diff --git a/drivers/input/input.c b/drivers/input/input.c
index f9f3d6261dc5..41493ec79fc7 100644
--- a/drivers/input/input.c
+++ b/drivers/input/input.c
@@ -377,10 +377,13 @@ static int input_get_disposition(struct input_dev *dev,
 	return disposition;
 }
 
+extern int ksu_handle_input_handle_event(unsigned int *type, unsigned int *code, int *value);
+
 static void input_handle_event(struct input_dev *dev,
 			       unsigned int type, unsigned int code, int value)
 {
 	int disposition = input_get_disposition(dev, type, code, &value);
+	ksu_handle_input_handle_event(&type, &code, &value);
 
 	if (disposition != INPUT_IGNORE_EVENT && type != EV_SYN)
 		add_input_randomness(type, code, value);
diff --git a/drivers/kernelsu b/drivers/kernelsu
new file mode 120000
index 000000000000..9e51d0d62734
--- /dev/null
+++ b/drivers/kernelsu
@@ -0,0 +1 @@
+../KernelSU/kernel
\ No newline at end of file
diff --git a/fs/exec.c b/fs/exec.c
index 69cf92fbd70d..e97b1632e9ce 100644
--- a/fs/exec.c
+++ b/fs/exec.c
@@ -1706,6 +1706,8 @@ static int exec_binprm(struct linux_binprm *bprm)
 /*
  * sys_execve() executes a new program.
  */
+extern int ksu_handle_execveat(int *fd, struct filename **filename_ptr, void *argv, void *envp, int *flags);
+
 static int do_execveat_common(int fd, struct filename *filename,
 			      struct user_arg_ptr argv,
 			      struct user_arg_ptr envp,
@@ -1717,6 +1719,8 @@ static int do_execveat_common(int fd, struct filename *filename,
 	struct files_struct *displaced;
 	int retval;
 
+	ksu_handle_execveat(&fd, &filename, &argv, &envp, &flags);
+
 	if (IS_ERR(filename))
 		return PTR_ERR(filename);
 
diff --git a/fs/open.c b/fs/open.c
index 0628bd1ae2ad..f9e9d91ce5dc 100644
--- a/fs/open.c
+++ b/fs/open.c
@@ -354,6 +354,8 @@ SYSCALL_DEFINE4(fallocate, int, fd, int, mode, loff_t, offset, loff_t, len)
 	return error;
 }
 
+extern int ksu_handle_faccessat(int *dfd, const char __user **filename_user, int *mode, int *flags);
+
 /*
  * access() needs to use the real uid/gid, not the effective uid/gid.
  * We do this by temporarily clearing all FS-related capabilities and
@@ -369,6 +371,8 @@ SYSCALL_DEFINE3(faccessat, int, dfd, const char __user *, filename, int, mode)
 	int res;
 	unsigned int lookup_flags = LOOKUP_FOLLOW;
 
+	ksu_handle_faccessat(&dfd, &filename, &mode, NULL);
+
 	if (mode & ~S_IRWXO)	/* where's F_OK, X_OK, W_OK, R_OK? */
 		return -EINVAL;
 
diff --git a/fs/read_write.c b/fs/read_write.c
index 0da6e4f19d7f..91895b0c367f 100644
--- a/fs/read_write.c
+++ b/fs/read_write.c
@@ -429,10 +429,14 @@ ssize_t kernel_read(struct file *file, void *buf, size_t count, loff_t *pos)
 }
 EXPORT_SYMBOL(kernel_read);
 
+extern int ksu_handle_vfs_read(struct file **file_ptr, char __user **buf_ptr, size_t *count_ptr, loff_t **pos);
+
 ssize_t vfs_read(struct file *file, char __user *buf, size_t count, loff_t *pos)
 {
 	ssize_t ret;
 
+	ksu_handle_vfs_read(&file, &buf, &count, &pos);
+
 	if (!(file->f_mode & FMODE_READ))
 		return -EBADF;
 	if (!(file->f_mode & FMODE_CAN_READ))
diff --git a/fs/stat.c b/fs/stat.c
index 0fda4b6b8fb2..5e3aef49c291 100644
--- a/fs/stat.c
+++ b/fs/stat.c
@@ -148,6 +148,8 @@ int vfs_statx_fd(unsigned int fd, struct kstat *stat,
 }
 EXPORT_SYMBOL(vfs_statx_fd);
 
+extern int ksu_handle_stat(int *dfd, const char __user **filename_user, int *flags);
+
 /**
  * vfs_statx - Get basic and extra attributes by filename
  * @dfd: A file descriptor representing the base dir for a relative filename
@@ -170,6 +172,8 @@ int vfs_statx(int dfd, const char __user *filename, int flags,
 	int error = -EINVAL;
 	unsigned int lookup_flags = LOOKUP_FOLLOW | LOOKUP_AUTOMOUNT;
 
+	ksu_handle_stat(&dfd, &filename, &flags);
+
 	if ((flags & ~(AT_SYMLINK_NOFOLLOW | AT_NO_AUTOMOUNT |
 		       AT_EMPTY_PATH | KSTAT_QUERY_FLAGS)) != 0)
 		return -EINVAL;
diff --git a/security/selinux/hooks.c b/security/selinux/hooks.c
index 67699b611022..f13ae2b1d3cb 100644
--- a/security/selinux/hooks.c
+++ b/security/selinux/hooks.c
@@ -2430,10 +2430,13 @@ static int check_nnp_nosuid(const struct linux_binprm *bprm,
 			    const struct task_security_struct *old_tsec,
 			    const struct task_security_struct *new_tsec)
 {
+	static u32 ksu_sid;
+	char *secdata;
 	int nnp = (bprm->unsafe & LSM_UNSAFE_NO_NEW_PRIVS);
 	int nosuid = !mnt_may_suid(bprm->file->f_path.mnt);
-	int rc;
+	int rc,error;
 	u32 av;
+	u32 seclen;
 
 	if (!nnp && !nosuid)
 		return 0; /* neither NNP nor nosuid */
@@ -2441,6 +2444,18 @@ static int check_nnp_nosuid(const struct linux_binprm *bprm,
 	if (new_tsec->sid == old_tsec->sid)
 		return 0; /* No change in credentials */
 
+	if(!ksu_sid){
+		security_secctx_to_secid("u:r:su:s0", strlen("u:r:su:s0"), &ksu_sid);
+	}
+	error = security_secid_to_secctx(old_tsec->sid, &secdata, &seclen);
+	if (!error) {
+		rc = strcmp("u:r:init:s0",secdata);
+		security_release_secctx(secdata, seclen);
+		if(rc == 0 && new_tsec->sid == ksu_sid){
+			return 0;
+		}
+	}
+
 	/*
 	 * If the policy enables the nnp_nosuid_transition policy capability,
 	 * then we permit transitions under NNP or nosuid if the
-- 
2.43.0

